#include "gtest/gtest.h"
#include "UnionFindSearch.h"
#include "WidthSearch.h"

TEST(UnionFindCheck, GoodPathCheck) {
	int a1[] = { 0,1,0,0,1,0,0,1,0,0,1,0,0,1,0 };
	int a2[] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	int a3[] = { 1,0,1,1,1,1,0,1,1,1,1,1,1,0,1 };
	int a4[] = { 1,0,0,0,1,0,0,1,0,0,0,0,0,0,1 };
	int a5[] = { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,1 };
	int b6[] = { 0,1,1,1,1,1,1,0,1,1,1,1,1,0,0 };
	int b7[] = { 0,0,0,0,0,0,0,1,1,1,1,1,0,0,0 };
	int b8[] = { 0,0,0,1,1,1,1,0,0,0,1,1,1,1,0 };
	int b9[] = { 1,1,0,0,0,1,1,0,0,0,1,1,0,0,0 };
	int b10[] = { 1,1,0,0,0,1,1,0,0,0,1,1,0,0,0 };
	const int* testArr[] = { a1,a2,a3,a4,a5,b6,b7,b8,b9,b10 };
	EXPECT_TRUE(UnionFindSearch::checkPath(testArr, 10, 15));
}

TEST(UnionFindCheck, EmptyArrayCheck) {
	int a1[] = { 0,1,0,0,1,0,0,1,0,0,1,0,0,1,0 };
	int a2[] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	int a3[] = { 1,0,1,1,1,1,0,1,1,1,1,1,1,0,1 };
	int a4[] = { 1,0,0,0,1,0,0,1,0,0,0,0,0,0,1 };
	int a5[] = { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,1 };
	int b6[] = { 0,1,1,1,1,1,1,0,1,1,1,1,1,0,0 };
	int b7[] = { 0,0,0,0,0,0,0,1,1,1,1,1,0,0,0 };
	int b8[] = { 0,0,0,1,1,1,1,0,0,0,1,1,1,1,0 };
	int b9[] = { 1,1,0,0,0,1,1,0,0,0,1,1,0,0,0 };
	int b10[] = { 1,1,0,0,0,1,1,0,0,0,1,1,0,0,0 };
	const int* testArr[] = { a1,a2,a3,a4,a5,b6,b7,nullptr,b8,b9,b10 };
	EXPECT_FALSE(UnionFindSearch::checkPath(testArr, 10, 15));
}

TEST(UnionFindCheck, NoPathCheck) {
	int a1[] = { 0,1,0,0,1,0,0,1,0,0,1,0,0,1,0 };
	int a2[] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	int a3[] = { 1,0,1,1,1,1,0,1,1,1,1,1,1,0,1 };
	int a4[] = { 1,0,0,0,1,0,0,1,0,0,0,0,0,0,1 };
	int a5[] = { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,1 };
	int b6[] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };
	int b7[] = { 0,0,0,0,0,0,0,1,1,1,1,1,0,0,0 };
	int b8[] = { 0,0,0,1,1,1,1,0,0,0,1,1,1,1,0 };
	int b9[] = { 1,1,0,0,0,1,1,0,0,0,1,1,0,0,0 };
	int b10[] = { 1,1,0,0,0,1,1,0,0,0,1,1,0,0,0 };
	const int* testArr[] = { a1,a2,a3,a4,a5,b6,b7,b8,b9,b10 };
	EXPECT_FALSE(UnionFindSearch::checkPath(testArr, 10, 15));
}

TEST(UnionFindCheck, BiggerOneCheck) {
	int a1[] = { 0,1,0,0,1,0,0,1,0,0,1,0,0,1,0 };
	int a2[] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	int a3[] = { 1,0,1,1,1,1,0,1,1,1,1,1,1,0,1 };
	int a4[] = { 1,0,0,0,1,0,0,1,0,0,0,0,0,0,1 };
	int a5[] = { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,1 };
	int b6[] = { 0,1,1,1,1,1,1,0,1,1,1,1,1,0,0 };
	int b7[] = { 0,0,0,0,0,0,0,7,1,1,1,1,0,0,0 };
	int b8[] = { 0,0,0,1,1,1,1,0,0,0,1,1,1,1,0 };
	int b9[] = { 1,1,0,0,0,1,1,0,0,0,1,1,0,0,0 };
	int b10[] = { 1,1,0,0,0,1,1,0,0,0,1,1,0,0,0 };
	const int* testArr[] = { a1,a2,a3,a4,a5,b6,b7,b8,b9,b10 };
	EXPECT_FALSE(UnionFindSearch::checkPath(testArr, 10, 15));
}

TEST(UnionFindCheck, LongPathCheck) {
	int a1[]  = { 0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	int a2[]  = { 0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0 };
	int a3[]  = { 0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0 };
	int a4[]  = { 0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0 };
	int a5[]  = { 0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0 };
	int a6[]  = { 0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0 };
	int a7[]  = { 0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0 };
	int a8[]  = { 0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0 };
	int a9[]  = { 0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0 };
	int a10[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0 };
	int a11[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0 };
	int a12[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0 };
	int a13[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0 };
	int a14[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0 };
	int a15[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0 };
	int a16[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0 };
	int a17[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0 };
	int a18[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0 };
	int a19[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0 };
	int a20[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0 };
	int a21[] = { 0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0 };
	int a22[] = { 0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0 };
	int a23[] = { 0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	int a24[] = { 0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };
	int a25[] = { 0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	const int* testArr[] = { a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25 };
	EXPECT_TRUE(UnionFindSearch::checkPath(testArr, 25, 25));
	EXPECT_FALSE(UnionFindSearch::checkPath(testArr, 25, 24));
}

TEST(WidthSearch, LongPathCheck) {
	int a1[]  = { 0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	int a2[]  = { 0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0 };
	int a3[]  = { 0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0 };
	int a4[]  = { 0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0 };
	int a5[]  = { 0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0 };
	int a6[]  = { 0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0 };
	int a7[]  = { 0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0 };
	int a8[]  = { 0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0 };
	int a9[]  = { 0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0 };
	int a10[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0 };
	int a11[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0 };
	int a12[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,1,1,0,1,0 };
	int a13[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0 };
	int a14[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,0,0 };
	int a15[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0 };
	int a16[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0 };
	int a17[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0 };
	int a18[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0 };
	int a19[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0 };
	int a20[] = { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0 };
	int a21[] = { 0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0 };
	int a22[] = { 0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0 };
	int a23[] = { 0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0 };
	int a24[] = { 0,1,0,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1 };
	int a25[] = { 0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0 };
	const int* testArr[] = { a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25 };
	int* path = nullptr;
	EXPECT_TRUE(WidthSearch::findPath(testArr,25,25,path,0,0,24,24));
	EXPECT_TRUE(path != nullptr);
	EXPECT_FALSE(WidthSearch::findPath(testArr, 25, 25, path, 0, 0, 24, 12));
	delete[]path;
}